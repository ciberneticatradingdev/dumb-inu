---
import Layout from '../layouts/Layout.astro';
---

<Layout
	title="Dumb Inu Flappy Bird - Leaderboard"
	description="Check out the top scores in Dumb Inu Flappy Bird! See how you rank against other players."
	keywords="dumb inu leaderboard, flappy bird scores, dumb inu memecoin, high scores"
	canonicalURL=""
  robots="index, follow"
>
  <div id="walletProvider"></div>
  <div class="min-h-screen bg-[#f5c303] py-8">
    <div class="container mx-auto px-4">
      <!-- Header -->
      <div class="text-center mb-8">
        <div class="flex items-center justify-center gap-4 mb-4">
          <img src="/game/dumb-inu-rocket.png" alt="Dumb Inu" class="w-16 h-16" />
          <h1 class="text-5xl md:text-6xl font-bold text-white drop-shadow-lg">LEADERBOARD</h1>
        </div>
        <p class="text-xl text-white/90">Top Flappy Dumb Inu Players</p>
      </div>

      <!-- Navigation -->
      <div class="flex justify-center gap-4 mb-8">
        <a href="/game" class="bg-[#62a14d] hover:bg-[#4a8a3a] text-white font-bold py-3 px-6 rounded-full transition-all transform hover:scale-105 shadow-lg hover:no-underline">
          üéÆ Play Game
        </a>
        <a href="/" class="bg-white/20 hover:bg-white/30 backdrop-blur-md text-white font-bold py-3 px-6 rounded-full transition-all transform hover:scale-105 border border-white/30 hover:no-underline shadow-lg">
          üè† Home
        </a>
      </div>



      <!-- Filters -->
      <div class="bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 p-6 mb-8">
        <div class="flex flex-wrap gap-4 justify-center items-center">
          <div class="flex items-center gap-2">
            <label for="timeFilter" class="text-white font-medium">Time Period:</label>
            <select id="timeFilter" class="bg-white/20 text-white border border-white/30 rounded-lg px-3 py-2 backdrop-blur-md">
              <option value="all">All Time</option>
              <option value="today">Today</option>
              <option value="week">This Week</option>
              <option value="month">This Month</option>
            </select>
          </div>
          <div class="flex items-center gap-2">
            <label for="limitFilter" class="text-white font-medium">Show:</label>
            <select id="limitFilter" class="bg-white/20 text-white border border-white/30 rounded-lg px-3 py-2 backdrop-blur-md">
              <option value="10">Top 10</option>
              <option value="25">Top 25</option>
              <option value="50">Top 50</option>
              <option value="100">Top 100</option>
            </select>
          </div>
          <button id="refreshBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-all transform hover:scale-105">
            üîÑ Refresh
          </button>
        </div>
      </div>

      <!-- Loading State -->
      <div id="loadingState" class="text-center py-12">
        <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-white"></div>
        <p class="text-white mt-4">Loading leaderboard...</p>
      </div>

      <!-- Error State -->
      <div id="errorState" class="text-center py-12 hidden">
        <div class="bg-red-500/20 backdrop-blur-md rounded-2xl border border-red-500/30 p-6 max-w-md mx-auto">
          <p class="text-red-200 mb-4">‚ùå Failed to load leaderboard</p>
          <button id="retryBtn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-all">
            Try Again
          </button>
        </div>
      </div>

      <!-- Leaderboard Table -->
      <div id="leaderboardContainer" class="hidden">
        <div class="bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 overflow-hidden shadow-2xl">
          <div class="overflow-x-auto">
            <table class="w-full">
              <thead class="bg-white/20">
                <tr>
                  <th class="px-6 py-4 text-left text-white font-bold">#</th>
                  <th class="px-6 py-4 text-left text-white font-bold">Player</th>
                  <th class="px-6 py-4 text-center text-white font-bold">Score</th>
                  <th class="px-6 py-4 text-center text-white font-bold">Date</th>
                </tr>
              </thead>
              <tbody id="leaderboardBody">
                <!-- Scores will be populated here -->
              </tbody>
            </table>
          </div>
        </div>

        <!-- Pagination -->
        <div id="paginationContainer" class="flex justify-center mt-8 hidden">
          <div class="flex gap-2">
            <button id="prevBtn" class="bg-white/20 hover:bg-white/30 text-white font-bold py-2 px-4 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed">
              ‚Üê Previous
            </button>
            <span id="pageInfo" class="bg-white/10 text-white px-4 py-2 rounded-lg">Page 1</span>
            <button id="nextBtn" class="bg-white/20 hover:bg-white/30 text-white font-bold py-2 px-4 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed">
              Next ‚Üí
            </button>
          </div>
        </div>
      </div>

      <!-- Empty State -->
      <div id="emptyState" class="text-center py-12 hidden">
        <div class="bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 p-8 max-w-md mx-auto">
          <p class="text-white/80 text-lg mb-4">üéØ No scores yet!</p>
          <p class="text-white/60 mb-6">Be the first to set a high score</p>
          <a href="/game" class="bg-[#62a14d] hover:bg-[#4a8a3a] text-white font-bold py-3 px-6 rounded-full transition-all transform hover:scale-105 shadow-lg hover:no-underline">
            Play Now
          </a>
        </div>
      </div>

      <!-- User Stats -->
      <div id="userStats" class="mt-8 hidden">
        <div class="bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 p-6">
          <h3 class="text-white font-bold text-xl mb-4 text-center">Your Stats</h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
            <div class="bg-white/10 rounded-lg p-4">
              <p class="text-white/80 text-sm">Best Score</p>
              <p id="userBestScore" class="text-white font-bold text-2xl">-</p>
            </div>
            <div class="bg-white/10 rounded-lg p-4">
              <p class="text-white/80 text-sm">Current Rank</p>
              <p id="userCurrentRank" class="text-white font-bold text-2xl">-</p>
            </div>
            <div class="bg-white/10 rounded-lg p-4">
              <p class="text-white/80 text-sm">Total Games</p>
              <p id="userTotalGames" class="text-white font-bold text-2xl">-</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Custom scrollbar for table */
  .overflow-x-auto::-webkit-scrollbar {
    height: 8px;
  }
  
  .overflow-x-auto::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
  }
  
  .overflow-x-auto::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 4px;
  }
  
  .overflow-x-auto::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }
  
  /* Mobile responsive adjustments */
  @media (max-width: 768px) {
    table {
      font-size: 0.875rem;
    }
    
    th, td {
      padding: 0.75rem 0.5rem;
    }
    
    h1 {
      font-size: 2.5rem !important;
    }
  }
  
  /* Rank styling */
  .rank-1 {
    background: linear-gradient(135deg, #ffd700, #ffed4e);
    color: #000;
  }
  
  .rank-2 {
    background: linear-gradient(135deg, #c0c0c0, #e5e5e5);
    color: #000;
  }
  
  .rank-3 {
    background: linear-gradient(135deg, #cd7f32, #daa520);
    color: #fff;
  }
</style>

<script>
  
  class LeaderboardManager {
    constructor() {
      this.currentPage = 1;
      this.pageSize = 10;
      this.currentFilter = 'all';
      this.currentLimit = 10;
      this.isLoading = false;
      
      this.setupEventListeners();
      this.loadLeaderboard();
    }
    
    setupEventListeners() {
      // Filter changes
      document.getElementById('timeFilter')?.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        this.currentFilter = target.value;
        this.currentPage = 1;
        this.loadLeaderboard();
      });
      
      document.getElementById('limitFilter')?.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        this.currentLimit = parseInt(target.value);
        this.currentPage = 1;
        this.loadLeaderboard();
      });
      
      // Refresh button
      document.getElementById('refreshBtn')?.addEventListener('click', () => {
        this.loadLeaderboard();
      });
      
      // Retry button
      document.getElementById('retryBtn')?.addEventListener('click', () => {
        this.loadLeaderboard();
      });
      
      // Pagination
      document.getElementById('prevBtn')?.addEventListener('click', () => {
        if (this.currentPage > 1) {
          this.currentPage--;
          this.loadLeaderboard();
        }
      });
      
      document.getElementById('nextBtn')?.addEventListener('click', () => {
        this.currentPage++;
        this.loadLeaderboard();
      });
    }
    
    async loadLeaderboard() {
      if (this.isLoading) return;
      
      this.isLoading = true;
      this.showLoading();
      
      try {
        const params = new URLSearchParams({
          limit: this.currentLimit.toString(),
          offset: ((this.currentPage - 1) * this.pageSize).toString(),
          period: this.currentFilter
        });
        
        const response = await fetch(`/api/leaderboard?${params}`);
        
        if (!response.ok) {
          throw new Error('Failed to fetch leaderboard');
        }
        
        const data = await response.json();
        
        if (data.success) {
          this.displayLeaderboard(data.data);
        } else {
          throw new Error(data.error || 'Unknown error');
        }
      } catch (error) {
        console.error('Error loading leaderboard:', error);
        this.showError();
      } finally {
        this.isLoading = false;
      }
    }
    
    showLoading() {
      document.getElementById('loadingState')?.classList.remove('hidden');
      document.getElementById('errorState')?.classList.add('hidden');
      document.getElementById('leaderboardContainer')?.classList.add('hidden');
      document.getElementById('emptyState')?.classList.add('hidden');
    }
    
    showError() {
      document.getElementById('loadingState')?.classList.add('hidden');
      document.getElementById('errorState')?.classList.remove('hidden');
      document.getElementById('leaderboardContainer')?.classList.add('hidden');
      document.getElementById('emptyState')?.classList.add('hidden');
    }
    
    displayLeaderboard(scores) {
      document.getElementById('loadingState')?.classList.add('hidden');
      document.getElementById('errorState')?.classList.add('hidden');
      
      if (!scores || scores.length === 0) {
        document.getElementById('emptyState')?.classList.remove('hidden');
        document.getElementById('leaderboardContainer')?.classList.add('hidden');
        return;
      }
      
      document.getElementById('emptyState')?.classList.add('hidden');
      document.getElementById('leaderboardContainer')?.classList.remove('hidden');
      
      const tbody = document.getElementById('leaderboardBody');
      if (!tbody) return;
      
      tbody.innerHTML = '';
      
      scores.forEach((score, index) => {
        const rank = ((this.currentPage - 1) * this.pageSize) + index + 1;
        const row = document.createElement('tr');
        row.className = 'border-b border-white/10 hover:bg-white/5 transition-colors';
        
        // Format wallet address
        const shortAddress = `${score.wallet_address.slice(0, 6)}...${score.wallet_address.slice(-4)}`;
        
        // Format date
        const date = new Date(score.created_at).toLocaleDateString();
        
        // Rank styling
        let rankClass = '';
        let rankIcon = '';
        if (rank === 1) {
          rankClass = 'rank-1';
          rankIcon = 'ü•á';
        } else if (rank === 2) {
          rankClass = 'rank-2';
          rankIcon = 'ü•à';
        } else if (rank === 3) {
          rankClass = 'rank-3';
          rankIcon = 'ü•â';
        }
        
        row.innerHTML = `
          <td class="px-6 py-4">
            <span class="inline-flex items-center justify-center w-8 h-8 rounded-full font-bold ${rankClass}">
              ${rankIcon || rank}
            </span>
          </td>
          <td class="px-6 py-4">
            <div class="font-mono text-white">${shortAddress}</div>
          </td>
          <td class="px-6 py-4 text-center">
            <span class="text-2xl font-bold text-white">${score.score}</span>
          </td>
          <td class="px-6 py-4 text-center text-white/80">
            ${date}
          </td>
        `;
        
        tbody.appendChild(row);
      });
      
      // Update pagination
      this.updatePagination(scores.length);
    }
    
    updatePagination(scoresCount) {
      const paginationContainer = document.getElementById('paginationContainer');
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      const pageInfo = document.getElementById('pageInfo');
      
      if (scoresCount < this.pageSize && this.currentPage === 1) {
        paginationContainer?.classList.add('hidden');
        return;
      }
      
      paginationContainer?.classList.remove('hidden');
      
      // Update buttons
      if (prevBtn) {
        (prevBtn as HTMLButtonElement).disabled = this.currentPage === 1;
      }
      
      if (nextBtn) {
        (nextBtn as HTMLButtonElement).disabled = scoresCount < this.pageSize;
      }
      
      if (pageInfo) {
        pageInfo.textContent = `Page ${this.currentPage}`;
      }
    }
  }
  
  // Initialize components when page loads
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize leaderboard
    new LeaderboardManager();
  });
  
  // Hide user stats section since we're not using wallet integration for now
  document.addEventListener('DOMContentLoaded', () => {
    const userStats = document.getElementById('userStats');
    if (userStats) {
      userStats.style.display = 'none';
    }
  });
</script>